openapi: 3.0.0
info:
  title: Chess Game API - User Module
  version: 1.0.0
  description: This part of the API handles user management.

paths:
  /users/register:
    post:
      summary: Register a new user
      tags: [User]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [username, email, password]
              properties:
                username:
                  type: string
                  description: Unique username
                email:
                  type: string
                  description: User's email address
                password:
                  type: string
                  description: User's password
      responses:
        201:
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Bad request (e.g., missing data, username/email already in use)

  /users/login:
    post:
      summary: Authenticate user and return JWT
      tags: [User]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                  description: User's email address
                password:
                  type: string
                  description: User's password
      responses:
        201:
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Invalid credentials

  /users/profile/{id}:
    get:
      summary: Get user profile by ID
      tags: [User]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: User ID
      responses:
        200:
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        404:
          description: User not found

  /users/get-current-user:
    get:
      summary: Get the profile of the currently authenticated user
      tags: [User]
      responses:
        200:
          description: Current user profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'

  /users/logout:
    get:
      summary: Logout the current user
      tags: [User]
      responses:
        200:
          description: User logged out successfully

  /users/get-websocket-token:
    get:
      summary: Get a websocket token for the current user
      tags: [User]
      responses:
        200:
          description: Websocket token generated
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: JWT token for websocket connection

/users/ranking:
  get:
    summary: Retrieve a paginated list of users based on Elo ranking
    tags: [User]
    security:
      - bearerAuth: []
    parameters:
      - in: query
        name: username
        required: false
        schema:
          type: string
        description: Filter ranking by username (case insensitive regex search)
      - in: query
        name: minEloRating
        required: false
        schema:
          type: string
        description: Minimum Elo rating to filter the rankings
      - in: query
        name: maxEloRating
        required: false
        schema:
          type: string
        description: Maximum Elo rating to filter the rankings
      - in: query
        name: page
        required: false
        schema:
          type: string
        description: Page number of the rankings to retrieve
      - in: query
        name: itemsPerPage
        required: false
        schema:
          type: string
        description: Number of ranking items per page
    responses:
      200:
        description: Successfully retrieved list of ranked users
        content:
          application/json:
            schema:
              type: object
              properties:
                totalItems:
                  type: integer
                  description: Total number of users matching the ranking criteria
                totalPages:
                  type: integer
                  description: Total number of pages
                currentPage:
                  type: integer
                  description: Current page number
                items:
                  type: array
                  items:
                    $ref: '#/components/schemas/UserProfile'
      400:
        description: Invalid input or request parameters
      500:
        description: Server Error

components:
  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
       
        username:
          type: string
       
        email:
          type: string
     
        eloRating:
          type: integer      

    UserProfile:
      type: object
      properties:
        _id:
          type: string
        username:
          type: string
        eloRating:
          type: integer


securitySchemes:
  BearerAuth:
    type: http
    scheme: bearer
    bearerFormat: JWT

security:
  - BearerAuth: []

tags:
  - name: User
    description: Operations about user
