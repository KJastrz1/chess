openapi: 3.0.0
info:
  title: Chess Game API
  version: 1.0.0
  description: API for online chess game
paths:
  /games:
    post:
      summary: Create a new game
      tags:
        - Games
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - player1
              properties:
                player1:
                  type: string
                  description: The ID of the user creating the game
      responses:
        201:
          description: The game was successfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Game"
        400:
          description: Bad request
    get:
      summary: Get all games
      tags:
        - Games
      parameters:
        - in: query
          name: player1
          schema:
            type: string
          description: Player 1 ID to filter by
        - in: query
          name: player2
          schema:
            type: string
          description: Player 2 ID to filter by
        - in: query
          name: status
          schema:
            type: string
            enum:
              - waiting_for_player2
              - waiting_for_start
              - in_progress
              - finished
          description: Game status to filter by
        - in: query
          name: moveTime
          schema:
            type: number
          description: Move time to filter by
        - in: query
          name: winner
          schema:
            type: string
          description: Winner ID to filter by
        - in: query
          name: player1Username
          schema:
            type: string
          description: Player1 Username to filter by
      responses:
        200:
          description: A list of games
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Game"
        500:
          description: Server error
  /games/{id}:
    get:
      summary: Get a game by ID
      tags:
        - Games
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The game ID
      responses:
        200:
          description: The found game
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Game"
        404:
          description: Game not found
        400:
          description: Invalid ID supplied
    put:
      summary: Update a game
      tags:
        - Games
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The game ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Game"
      responses:
        200:
          description: The updated game
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Game"
        404:
          description: Game not found
        400:
          description: Invalid request
    delete:
      summary: Delete a game
      tags:
        - Games
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The game ID
      responses:
        204:
          description: The game was deleted
        404:
          description: Game not found
        500:
          description: Server error
  /games/history:
    get:
      summary: Get game history for a user
      tags:
        - Games
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: opponentUsername
          schema:
            type: string
          description: Filter by opponent's username
        - in: query
          name: result
          schema:
            type: string
            enum:
              - won
              - lost
              - draw
          description: Filter by game result relative to the authenticated user
      responses:
        200:
          description: An array of games matching the history criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Game"
        400:
          description: Invalid request parameters
        401:
          description: Authorization information is missing or invalid.
        500:
          description: Server error
components:
  schemas:
    ChessPiece:
      type: string
      enum:
        - wp
        - wn
        - wb
        - wr
        - wq
        - wk
        - bp
        - bn
        - bb
        - br
        - bq
        - bk
        - None
      description: Chess pieces including white and black, each represented by a two-character string where the first character indicates the color ('w' for white, 'b' for black) and the second character indicates the type of the piece. 'None' represents an empty square.

    Game:
      type: object
      required:
        - player1
      properties:
        _id:
          type: string
          description: The auto-generated id of the game
        player1:
          type: string
          description: Reference to the first player's user ID
        player2:
          type: string
          description: Reference to the second player's user ID
        board:
          type: array
          items:
            type: array
            items:
              $ref: "#/components/schemas/ChessPiece"
          description: The board state represented as an 8x8 array of ChessSquare, where each square contains a chess piece or 'None'
        whitePlayer:
          type: string
          description: The ID of the player playing white
        whosMove:
          type: string
          description: The ID of the player whose turn it is
        moveTime:
          type: number
          description: The time per move in seconds
        moves:
          type: array
          items:
            $ref: "#/components/schemas/Move"
        status:
          type: string
          enum:
            - waiting_for_player2
            - waiting_for_start
            - in_progress
            - finished
          description: The current status of the game
        winner:
          type: string
          nullable: true
          description: The ID of the winner, or null if the game is ongoing
        createdAt:
          type: string
          format: date-time
          description: The date when the game was created
        updatedAt:
          type: string
          format: date-time
          description: The date when the game was last updated
    Move:
      type: object
      properties:
        srcRow:
          type: number
          description: Source row for the move
        srcCol:
          type: number
          description: Source column for the move
        destRow:
          type: number
          description: Destination row for the move
        destCol:
          type: number
          description: Destination column for the move
        figure:
          $ref: "#/components/schemas/ChessPiece"
          description: The chess piece moved
tags:
  - name: Games
    description: The games managing API
securitySchemes:
  bearerAuth:
    type: http
    scheme: bearer
    bearerFormat: JWT
